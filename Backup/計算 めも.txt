
// ∞
sqrt(cos(x)) * abs(sin(x)) - abs(y) = 0



1/i = i^-1 = -i

i^x = e^ixtau/4



// 球面調和のごく一部
┌             ┐┌ ┐ ┌ ┐
│0.707  -0.707││x│=│a│
│0.707   0.707││y│ │b│
└             ┘└ ┘ └ ┘

a = x*0.707 - y*0.707
b = x*0.707 + y*0.707

a = 0.707 * (x - y)
b = 0.707 * (x + y)

a * b = (0.707 * (x - y)) * (0.707 * (x + y))
      = 0.5 * (x - y) * (x + y)
      = 0.5 * (x*x*-y*y)



無限回微分可能な関数はこのような形で近似することができる

f(x) = a[0]*x^0 + a[1]*x^1 + a[2]*x^2 + ...

マクローリン展開
a[n] = f(n)(0) / n!



FP16
符号部  1bit
指数部  5bit
仮数部 10bit

(2^(指数部 - 15)) * 1.仮数部

例
57 → 111001 → 1.11001 << 5

指数部 = 5 + 15 = 20 = 10100
仮数部 = 1100100000

最小
0x33800000
0.000000000000000000000001



FP32
符号部  1bit
指数部  8bit
仮数部 23bit

(2^(指数部 - 127)) * 1.仮数部

例
57 → 111001 → 1.11001 << 5

指数部 = 5 + 127 = 132 = 10000100
仮数部 = 11001000000000000000000



float x;
uint a;

x * (float)pow(2, a)
↓
x * (float)(1 << a)
↓指数部がオーバーフローしなければ同じ結果
asfloat(uint(x) + (a << 23))



// https://lipoyang.hatenablog.com/entry/2021/02/03/202242
// 2^xの近似
int32_t fxp_x = x * (float)(1 << 23);
int32_t tmp = fxp_x + (127 << 23);
float y = *(float*)&tmp;



// int32_t fxp_x = x * (float)(1 << 23); の詳細
// この操作により、少数部が23bitの固定小数点数ができあがる

int32_t temp0 = *(int32_t*)&x;                           // floatからint32_tへの変換
int32_t temp1 = temp0 & 0x007FFFFF | 0x00800000;         // 仮数部を抽出してケチ表現を追加
int32_t temp2 = ((temp0 >> 23) & 0x000000FF) - 127;      // 指数を抽出
temp1 = (temp2 >= 0) ? temp1 << temp2 : temp1 >> -temp2; // 仮数部を指数の回数ずらす
temp1 = (temp0 & 0x80000000) ? -temp1 : temp1;           // 符号を考慮



// https://lipoyang.hatenablog.com/entry/2021/02/03/202242
// log2(x)の近似 (2^xの近似の逆の操作をしている)
int32_t tmp = *(int32_t*)&x;
int32_t fxp_y = tmp - (127 << 23);
float y = (float)fxp_y / (float)(1 << 23);



Blenderで十角形から五芒星を作るための呪文
(3 - sqrt(5)) / 2



辺の長さが1の正三角形の高さ
1   = (0.5^2 + y^2)^0.5
1   = (0.25 + y^2)^0.5
1   = 0.25 + y^2
y^2 = 0.75
y   = 0.75^0.5
y   = 0.86602540378443864676372317075294



// Line SDF
float3 p0, p1, pos;
float3 edge = p1 - p0;
float3 rp = pos - p0;

float l = length(edge);
float n = edge / l;
float h = clamp(dot(rp, n), 0.0, l);
float temp0 = length(rp - (n * h));
↓
float l = length(edge);
float h = clamp(dot(rp, (edge / l)), 0.0, l);
float temp0 = length(rp - ((edge / l) * h));
↓
float l = length(edge);
float h = clamp(dot(rp, edge) / l, 0.0, l) / l;
float temp0 = length(rp - (edge * h));
↓
float l = length(edge);
float h = saturate(dot(rp, edge) / (l * l));
float temp0 = length(rp - (edge * h));
↓
float h = saturate(dot(rp, edge) / dot(edge, edge));
float temp0 = length(rp - (edge * h));



// ベジェ曲線

// 4ヶ所の座標
float3 v0, v1, v2, v3;

float3 lerp(float3 a, float3 b ,float t)
{
    return a + (b - a) * t;
}

float3 v4 = lerp(v0, v1, time);
float3 v5 = lerp(v1, v2, time);
float3 v6 = lerp(v2, v3, time);
float3 v7 = lerp(v4, v5, time);
float3 v8 = lerp(v5, v6, time);
float3 result = lerp(v7, v8, time);
↓
float3 result = v0 + (v1 - v0) * (time * 3.0) + (v2 + v0 - v1 * 2.0) * (time * time * 3.0) + (v3 - v0 + (v1 - v2) * 3.0) * (time * time * time);
↓
float3 bccvA = v3 + (-v2 + v1) * 3.0 - v0;
float3 bccvB = (v2 - v1 * 2.0 + v0) * 3.0;
float3 bccvC = (v1 - v0) * 3.0;
float3 bccvD = v0;
float3 result = time * (time * (time * bccvA + bccvB) + bccvC) + bccvD;



(x^2 + y^2)^0.5 =  1
 x^2 + y^2      =  1
       y^2      =  1 - x^2
       y        = (1 - x^2)^0.5

指数法則
a^x * a^y = a^(x+y)
a^x / a^y = a^(x-y)

a^x * b^x = (a * b)^x
a^x / b^x = (a / b)^x

(a^x)^y = a^(x * y)

(a^0.5) / (a^-0.5) = a

exp(a) = exp2(a * 1.442695)
e^a = (2^1.442695)^a = 2^(a * 1.442695)



1 / (|x| + 1)
|x| / (|x| + 1)



lerp(a, 1.0, b) = lerp(b, 1.0, a)
lerp(a, b, c) = lerp(b, a, 1.0 - c)



step(x,y) = x >= y



(a.x != 0.0 && a.y != 0.0 && a.z != 0.0) = all(a) = !any(a == 0.0) // すべての成分が0以外の場合1を返す
(a.x != 0.0 || a.y != 0.0 || a.z != 0.0) = any(a) = !all(a == 0.0) // どれかの成分が0以外の場合1を返す

(a.x == b.x && a.y == b.y && a.z == b.z) = all(a == b) = !any(a != b)
(a.x == b.x || a.y == b.y || a.z == b.z) = any(a == b) = !all(a != b)

( 4.0) % ( 1.5) = fmod( 4.0,  1.5) =  1.0;
(-4.0) % ( 1.5) = fmod(-4.0,  1.5) = -1.0;
( 4.0) % (-1.5) = fmod( 4.0, -1.5) =  1.0;
(-4.0) % (-1.5) = fmod(-4.0, -1.5) = -1.0;

frac( 1.25) = 0.25
frac(-1.25) = 0.75
frac( 1.75) = 0.75
frac(-1.75) = 0.25



Row    行
Column 列

単位行列 (I, E)
対角成分がすべて1で、それ以外の成分がすべて0の正方行列のこと

逆行列 (A^(-1))
A * B = I が成り立つとき
BをAの逆行列と呼ぶ

転置行列 (A^(t))
(行, 列)成分と(列, 行)成分を入れ替えた行列

正方行列
行の数と列の数が同じ行列

直行行列
転置行列と逆行列が同じ正方行列のこと
回転行列が直行行列の性質を持っている

正則行列 可逆行列 非特異行列
逆行列が存在できる行列

─
┌┐
││
└┘

ベクトルの内積
各成分を掛け算して足し合わせるだけ

(ax, ay, az)・(bx, by, bz) = ax * bx + ay * by + az * bz


例 3x3行列 A と 3次元ベクトル B の積

 ┌       ┐┌ ┐   ┌                  ┐   ┌                    ┐
 │a  b  c││j│   │Aの1行目・Bの1列目│   │(a, b, c)・(j, m, p)│
 │d  e  f││m│ = │Aの2行目・Bの1列目│ = │(d, e, f)・(j, m, p)│ = (a, d, g) * j + (b, e, h) * m + (c, f, i) * p
 │g  h  i││p│   │Aの3行目・Bの1列目│   │(g, h, i)・(j, m, p)│
 └       ┘└ ┘   └                  ┘   └                    ┘


例 3x3行列 A と 3x3行列 B の積

 ┌       ┐┌       ┐   ┌                                                            ┐   ┌                                                                  ┐
 │a  b  c││j  k  l│   │Aの1行目・Bの1列目   Aの1行目・Bの2列目   Aの1行目・Bの3列目│   │(a, b, c)・(j, m, p)   (a, b, c)・(k, n, q)   (a, b, c)・(l, o, r)│
 │d  e  f││m  n  o│ = │Aの2行目・Bの1列目   Aの2行目・Bの2列目   Aの2行目・Bの3列目│ = │(d, e, f)・(j, m, p)   (d, e, f)・(k, n, q)   (d, e, f)・(l, o, r)│
 │g  h  i││p  q  r│   │Aの3行目・Bの1列目   Aの3行目・Bの2列目   Aの3行目・Bの3列目│   │(g, h, i)・(j, m, p)   (g, h, i)・(k, n, q)   (g, h, i)・(l, o, r)│
 └       ┘└       ┘   └                                                            ┘   └                                                                  ┘

(AB)^t = B^t * A^t



       ┌              ┐
       │AxBx AxBy AxBz│
A ⊗ B =│AyBx AyBy AyBz│
       │AzBx AzBy AzBz│
       └              ┘

A ∧ B = A ⊗ B - B ⊗ A
        ┌              ┐ ┌              ┐
        │AxBx AxBy AxBz│ │BxAx BxAy BxAz│
A ∧ B =│AyBx AyBy AyBz│-│ByAx ByAy ByAz│
        │AzBx AzBy AzBz│ │BzAx BzAy BzAz│
        └              ┘ └              ┘
        ┌                             ┐
        │        0 AxBy-BxAy AxBz-BxAz│
A ∧ B =│AyBx-ByAx         0 AyBz-ByAz│
        │AzBx-BzAx AzBy-BzAy         0│
        └                             ┘

|A ∧ B| = 0 + (AxBy-BxAy)(AyBz-ByAz)(AzBx-BzAx) + (AxBz-BxAz)(AyBx-ByAx)(AzBy-BzAy) - 0 - 0 - 0

|A ∧ B| = 0



  C

A   B

float2 uvA, uvB, uvC;
float3 posA, posB, posC;

float2 uvA2B = uvB - uvA;
float2 uvA2C = uvC - uvA;

float3 posA2B = posB - posA;
float3 posA2C = posC - posA;

                           ┌                  ┐┌                ┐-1┌ ┐
                           │posA2B.x  posA2C.x││uvA2B.x  uvA2C.x│  │1│
float3 tangent = normalize(│posA2B.y  posA2C.y││uvA2B.y  uvA2C.y│  │0│)
                           │posA2B.z  posA2C.z│└                ┘  └ ┘
                           └                  ┘



4つの地点の距離
float AD, BD, CD, DD

4つの地点の座標
float3 AP, BP, CP, DP

求めたい座標
float3 TP

AD = length(AP - TP)
BD = length(BP - TP)
CD = length(CP - TP)
DD = length(DP - TP)


AD = length(AP - TP)
↓
AD^2 = dot(AP - TP, AP - TP)
↓
AD^2 = (AP.x - TP.x)^2 + (AP.y - TP.y)^2 + (AP.z - TP.z)^2
↓
AD^2 = (AP.x^2 + TP.x^2 - 2*AP.x*TP.x) + (AP.y^2 + TP.y^2 - 2*AP.y*TP.y) + (AP.z^2 + TP.z^2 - 2*AP.z*TP.z)
↓
AD^2 = dot(AP, AP) + dot(TP, TP) - 2*AP.x*TP.x - 2*AP.y*TP.y - 2*AP.z*TP.z
↓
AD^2 - dot(AP, AP) = -2*AP.x*TP.x - 2*AP.y*TP.y - 2*AP.z*TP.z + dot(TP, TP)


AD^2 - dot(AP, AP) = -2*AP.x*TP.x - 2*AP.y*TP.y - 2*AP.z*TP.z + dot(TP, TP)
BD^2 - dot(BP, BP) = -2*BP.x*TP.x - 2*BP.y*TP.y - 2*BP.z*TP.z + dot(TP, TP)
CD^2 - dot(CP, CP) = -2*CP.x*TP.x - 2*CP.y*TP.y - 2*CP.z*TP.z + dot(TP, TP)
DD^2 - dot(DP, DP) = -2*DP.x*TP.x - 2*DP.y*TP.y - 2*DP.z*TP.z + dot(TP, TP)
↓
┌    ┐ ┌           ┐ ┌                            ┐┌           ┐
│AD^2│ │dot(AP, AP)│ │-2*AP.x  -2*AP.y  -2*AP.z  1││   TP.x    │
│BD^2│-│dot(BP, BP)│=│-2*BP.x  -2*BP.y  -2*BP.z  1││   TP.y    │
│CD^2│ │dot(CP, CP)│ │-2*CP.x  -2*CP.y  -2*CP.z  1││   TP.z    │
│DD^2│ │dot(DP, DP)│ │-2*DP.x  -2*DP.y  -2*DP.z  1││dot(TP, TP)│
└    ┘ └           ┘ └                            ┘└           ┘
↓
┌                            ┐^-1 ┌    ┐ ┌           ┐  ┌           ┐
│-2*AP.x  -2*AP.y  -2*AP.z  1│    │AD^2│ │dot(AP, AP)│  │   TP.x    │
│-2*BP.x  -2*BP.y  -2*BP.z  1│   (│BD^2│-│dot(BP, BP)│)=│   TP.y    │
│-2*CP.x  -2*CP.y  -2*CP.z  1│    │CD^2│ │dot(CP, CP)│  │   TP.z    │
│-2*DP.x  -2*DP.y  -2*DP.z  1│    │DD^2│ │dot(DP, DP)│  │dot(TP, TP)│
└                            ┘    └    ┘ └           ┘  └           ┘

上記の式に値を代入してみる
AP = float3(  n, 0.0, 0.0)
BP = float3(0.0,   n, 0.0)
CP = float3(0.0, 0.0,   n)
DP = float3(0.0, 0.0, 0.0)

┌                   ┐^-1 ┌    ┐ ┌   ┐  ┌           ┐
│-2*n   0     0    1│    │AD^2│ │n^2│  │   TP.x    │
│ 0    -2*n   0    1│   (│BD^2│-│n^2│)=│   TP.y    │
│ 0     0    -2*n  1│    │CD^2│ │n^2│  │   TP.z    │
│ 0     0     0    1│    │DD^2│ │ 0 │  │dot(TP, TP)│
└                   ┘    └    ┘ └   ┘  └           ┘
↓
┌                                       ┐ ┌    ┐ ┌   ┐  ┌           ┐
│1/(-2*n)     0         0      -1/(-2*n)│ │AD^2│ │n^2│  │   TP.x    │
│   0      1/(-2*n)     0      -1/(-2*n)│(│BD^2│-│n^2│)=│   TP.y    │
│   0         0      1/(-2*n)  -1/(-2*n)│ │CD^2│ │n^2│  │   TP.z    │
│   0         0         0          1    │ │DD^2│ │ 0 │  │dot(TP, TP)│
└                                       ┘ └    ┘ └   ┘  └           ┘
↓
┌                             ┐┌          ┐ ┌           ┐
│-0.5/n    0       0     0.5/n││AD^2 - n^2│ │   TP.x    │
│  0     -0.5/n    0     0.5/n││BD^2 - n^2│=│   TP.y    │
│  0       0     -0.5/n  0.5/n││CD^2 - n^2│ │   TP.z    │
│  0       0       0       1  ││DD^2      │ │dot(TP, TP)│
└                             ┘└          ┘ └           ┘
↓
TP.x = (0.5/n) * (DD^2 - (AD^2 - n^2))
TP.y = (0.5/n) * (DD^2 - (BD^2 - n^2))
TP.z = (0.5/n) * (DD^2 - (CD^2 - n^2))
↓
TP.x = (0.5/n) * (DD^2 - AD^2 + n^2)
TP.y = (0.5/n) * (DD^2 - BD^2 + n^2)
TP.z = (0.5/n) * (DD^2 - CD^2 + n^2)

n = 0.5の場合
TP.x = DD^2 - AD^2 + 0.25
TP.y = DD^2 - BD^2 + 0.25
TP.z = DD^2 - CD^2 + 0.25
↓
float4 temp = float4(AD, BD, CD, DD);
temp = temp * temp;
TP = (temp.w + 0.25) - temp.xyz;



seiryu_k
ようするに座標を回転させたうえで回転後の座標系で平行移動させる行列ですよね。 
で、ここで行列の線形性を最大限活かしていくわけですが
4x4行列の回転部をA、平行移動部をWとすると、
4x4行列の変換は実際のところ、
Av+W＝v'という変換です。
（w成分は点群の座標で考えるとあんまり意味がないのでいったん無視）
vからv'を求めるのが順方向の行列なら、その逆行列はv'からvが求まればいいので、
道中がどうであれ、最終的にはv'がvとなるような行列が求まればそれが逆行列といえます。
ここまでを踏まえて、
上のベクトル式にA^-1を両辺掛けると
     Av+W  = v'
A^-1(Av+W) = A^-1v'
   v+A^-1W = A^-1v'
         v = A^-1v'-A^-1W
         v = A^-1(v'-W)
です。



https://www.reedbeta.com/blog/quadrilateral-interpolation-part-2

ここでの^記号はウェッジ積

0 = (−q + b1*u + b2*v + b3*u*v)^(b1 + b3*v)

0 = (-q)^(b1) + (b1*u)^(b1) + (b2*v)^(b1) + (b3*u*v)^(b1) + (-q)^(b3*v) + (b1*u)^(b3*v) + (b2*v)^(b3*v) + (b3*u*v)^(b3*v)
0 =   (-q^b1) +   (b1^b1)*u +   (b2^b1)*v +   (b3^b1)*u*v +   (-q^b3)*v +   (b1^b3)*u*v +   (b2^b3)*v*v + (b3^b3)*u*v*v

0 = (-q^b1) + (b2^b1)*v + (b3^b1)*u*v + (-q^b3)*v + (b1^b3)*u*v + (b2^b3)*v*v
0 = (-q^b1) + (b2^b1)*v + (-q^b3)*v + (b2^b3)*v*v + (b3^b1)*u*v + (b1^b3)*u*v

0 = (-q^b1) + ((b2^b1)+(-q^b3))*v + (b2^b3)*v*v + ((b3^b1)+(b1^b3))*u*v
0 = (-q^b1) + ((b2^b1)+(b3^ q))*v + (b2^b3)*v*v + ((b3^b1)-(b3^b1))*u*v
0 = (b1^q)  + ((b3^ q)-(b1^b2))*v + (b2^b3)*v*v

a = ★(b2 ⋀ b3)
b = ★(b3 ⋀  q - b1 ⋀ b2)
c = ★(b1 ⋀  q)

v = 2次方程式の解の公式(a, b, c)



float2 q, b1, b2, b3;
float u, v;

q = b1*u + b2*v + b3*u*v
↓
q.x = b1.x*u + b2.x*v + b3.x*u*v
q.y = b1.y*u + b2.y*v + b3.y*u*v

q.x = b1.x*u + b2.x*v + b3.x*u*v
q.x - b2.x*v = b1.x*u + b3.x*u*v
q.x - b2.x*v = (b1.x + b3.x*v)*u
(q.x - b2.x*v) / (b1.x + b3.x*v) = u
u = (q.x - b2.x*v) / (b1.x + b3.x*v)

q.y = b1.y*u + b2.y*v + b3.y*u*v
u = (q.y - b2.y*v) / (b1.y + b3.y*v)

(q.x - b2.x*v) / (b1.x + b3.x*v) = (q.y - b2.y*v) / (b1.y + b3.y*v)
(q.x - b2.x*v)*(b1.y + b3.y*v) = (q.y - b2.y*v)*(b1.x + b3.x*v)
q.x*b1.y + q.x*b3.y*v - b2.x*v*b1.y - b2.x*v*b3.y*v = q.y*b1.x + q.y*b3.x*v - b2.y*v*b1.x - b2.y*v*b3.x*v
q.x*b1.y + q.x*b3.y*v - b2.x*b1.y*v - b2.x*b3.y*v*v = q.y*b1.x + q.y*b3.x*v - b2.y*b1.x*v - b2.y*b3.x*v*v
0 = q.y*b1.x + q.y*b3.x*v - b2.y*b1.x*v - b2.y*b3.x*v*v - q.x*b1.y - q.x*b3.y*v + b2.x*b1.y*v + b2.x*b3.y*v*v
0 = q.y*b1.x - q.x*b1.y + q.y*b3.x*v - q.x*b3.y*v + b2.x*b1.y*v - b2.y*b1.x*v + b2.x*b3.y*v*v - b2.y*b3.x*v*v
0 = (q.y*b1.x - q.x*b1.y) + (q.y*b3.x - q.x*b3.y + b2.x*b1.y - b2.y*b1.x)*v + (b2.x*b3.y - b2.y*b3.x)*v*v

a = b2.x*b3.y - b2.y*b3.x                       //★(b2 ⋀ b3)と同じ
b = q.y*b3.x - q.x*b3.y + b2.x*b1.y - b2.y*b1.x //★(b3 ⋀  q - b1 ⋀ b2)と同じ
c = q.y*b1.x - q.x*b1.y                         //★(b1 ⋀  q)と同じ

v = 2次方程式の解の公式(a, b, c)



// たぶんクォータニオン同士の掛け算
(i(a.x) + j(a.y) + k(a.z) + a.w) * (i(b.x) + j(b.y) + k(b.z) + b.w)

i(a.x) * i(b.x) = -1(a.x * b.x)
i(a.x) * j(b.y) =  k(a.x * b.y)
i(a.x) * k(b.z) = -j(a.x * b.z)
i(a.x) *   b.w  =  i(a.x * b.w)
j(a.y) * i(b.x) = -k(a.y * b.x)
j(a.y) * j(b.y) = -1(a.y * b.y)
j(a.y) * k(b.z) =  i(a.y * b.z)
j(a.y) *   b.w  =  j(a.y * b.w)
k(a.z) * i(b.x) =  j(a.z * b.x)
k(a.z) * j(b.y) = -i(a.z * b.y)
k(a.z) * k(b.z) = -1(a.z * b.z)
k(a.z) *   b.w  =  k(a.z * b.w)
  a.w  * i(b.x) =  i(a.w * b.x)
  a.w  * j(b.y) =  j(a.w * b.y)
  a.w  * k(b.z) =  k(a.w * b.z)
  a.w  *   b.w  =   (a.w * b.w)

i(+(a.x * b.w) +(a.y * b.z) -(a.z * b.y) +(a.w * b.x))
j(-(a.x * b.z) +(a.y * b.w) +(a.z * b.x) +(a.w * b.y))
k(+(a.x * b.y) -(a.y * b.x) +(a.z * b.w) +(a.w * b.z))
 (-(a.x * b.x) -(a.y * b.y) -(a.z * b.z) +(a.w * b.w))

i(+(a.w * b.x) -(a.z * b.y) +(a.y * b.z) +(a.x * b.w))
j(+(a.z * b.x) +(a.w * b.y) -(a.x * b.z) +(a.y * b.w))
k(-(a.y * b.x) +(a.x * b.y) +(a.w * b.z) +(a.z * b.w))
 (-(a.x * b.x) -(a.y * b.y) -(a.z * b.z) +(a.w * b.w))



// 投影行列 DirectX
x   0   0         0
0   y   0         0
0   0   n/(f-n)   nf/(f-n)
0   0   -1        0

// 逆Depth
x   0   0          0
0   y   0          0
0   0   n/(f-n)   -n*n/(f-n)
0   0   -1         n+f



// なにこれ？
length(cameraPos + Ray * n) = 1.0
↓
dot(cameraPos + Ray*n, cameraPos + Ray*n) = 1.0
↓
dot(cameraPos + Ray*n, Ray*n) + dot(cameraPos + Ray*n, cameraPos) = 1.0
↓
dot(Ray*n, Ray*n) + dot(cameraPos, Ray*n) + dot(cameraPos, cameraPos) + dot(Ray*n, cameraPos) = 1.0
↓
dot(Ray*n, Ray*n) + 2*dot(cameraPos, Ray*n) + dot(cameraPos, cameraPos) = 1.0
↓
(n^2)*dot(Ray, Ray) + n*2*dot(cameraPos, Ray) + dot(cameraPos, cameraPos) = 1.0
↓
n^2 + n*2*dot(cameraPos, Ray) + dot(cameraPos, cameraPos) - 1.0 = 0.0



sqrt(dot(a, a)) / r
↓
sqrt(dot(a, a)) / sqrt(r * r)
↓
sqrt(dot(a, a) / r * r)
↓
sqrt(dot(a/r, a/r))












