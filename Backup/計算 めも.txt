


FP32
符号部  1bit
指数部  8bit
仮数部 23bit

(1 << (指数部 - 127)) * 1.仮数部

57
↓
111001
↓
1.11001 << 5

指数部 = 127 + 5 = 132 = 10000100
仮数部 = 11001

uint a;
uint(x * (float)(1 << a))
↓指数部がオーバーフローしなければ同じ結果
uint(x) + (a << 23)



// https://lipoyang.hatenablog.com/entry/2021/02/03/202242
// 2^xの近似
int32_t fxp_x = x * (float)(1 << 23);
int32_t tmp = fxp_x + (127 << 23);
float y = *(float*)&tmp;



// int32_t fxp_x = x * (float)(1 << 23); の詳細
// この操作により、少数部が23bitの固定小数点数ができあがる

int32_t temp0 = *(int32_t*)&x;                           // floatからint32_tへの変換
int32_t temp1 = temp0 & 0x007FFFFF | 0x00800000;         // 仮数部を抽出してケチ表現を追加
int32_t temp2 = ((temp0 >> 23) & 0x000000FF) - 127;      // 指数を抽出
temp1 = (temp2 >= 0) ? temp1 << temp2 : temp1 >> -temp2; // 仮数部を指数の回数ずらす
temp1 = (temp0 & 0x80000000) ? -temp1 : temp1;           // 符号を考慮



// https://lipoyang.hatenablog.com/entry/2021/02/03/202242
// log2(x)の近似 (2^xの近似の逆の操作をしている)
int32_t tmp = *(int32_t*)&x;
int32_t fxp_y = tmp - (127 << 23);
float y = (float)fxp_y / (float)(1 << 23);



辺の長さが1の正三角形の高さ
1   = (0.5^2 + y^2)^0.5
1   = (0.25 + y^2)^0.5
1   = 0.25 + y^2
y^2 = 0.75
y   = 0.75^0.5
y   = 0.86602540378443864676372317075294



// Line SDF
float3 p0, p1, pos;
float3 edge = p1 - p0;
float3 rp = pos - p0;

float l = length(edge);
float n = edge / l;
float h = clamp(dot(rp, n), 0.0, l);
float temp0 = length(rp - (n * h));
↓
float l = length(edge);
float h = clamp(dot(rp, (edge / l)), 0.0, l);
float temp0 = length(rp - ((edge / l) * h));
↓
float l = length(edge);
float h = clamp(dot(rp, edge) / l, 0.0, l) / l;
float temp0 = length(rp - (edge * h));
↓
float l = length(edge);
float h = saturate(dot(rp, edge) / (l * l));
float temp0 = length(rp - (edge * h));
↓
float h = saturate(dot(rp, edge) / dot(edge, edge));
float temp0 = length(rp - (edge * h));



//4ヶ所の座標
float3 v0, v1, v2, v3;

float3 lerp(float3 a, float3 b ,float t)
{
    return a + (b - a) * t;
}

float3 v4 = lerp(v0, v1, time);
float3 v5 = lerp(v1, v2, time);
float3 v6 = lerp(v2, v3, time);
float3 v7 = lerp(v4, v5, time);
float3 v8 = lerp(v5, v6, time);
float3 result = lerp(v7, v8, time);
↓
float3 result = v0 + (v1 - v0) * (time * 3.0) + (v2 + v0 - v1 * 2.0) * (time * time * 3.0) + (v3 - v0 + (v1 - v2) * 3.0) * (time * time * time);
↓
float3 bccvA = v3 + (-v2 + v1) * 3.0 - v0;
float3 bccvB = (v2 - v1 * 2.0 + v0) * 3.0;
float3 bccvC = (v1 - v0) * 3.0;
float3 bccvD = v0;
float3 result = time * (time * (time * bccvA + bccvB) + bccvC) + bccvD;



(x^2 + y^2)^0.5 =  1
 x^2 + y^2      =  1
       y^2      =  1 - x^2
       y        = (1 - x^2)^0.5

指数法則
a^x * a^y = a^(x+y)
a^x / a^y = a^(x-y)

a^x * b^x = (a * b)^x
a^x / b^x = (a / b)^x

(a^x)^y = a^(x * y)

(a^0.5) / (a^-0.5) = a

exp(a) = exp2(a * 1.442695)
e^a = (2^1.442695)^a = 2^(a * 1.442695)



1 / (|x| + 1)
|x| / (|x| + 1)



tan((180 - 視野角) / 2) + 1



angle = (angle >  180) and angle - 360 or (angle < -180) and angle + 360 or angle
↓
angle = Mathf.DeltaAngle(0, angle)

// ?
Mathf.DeltaAngle(A, B) == Mathf.DeltaAngle(0f, B - A)



TransformPoint     : 回転とスケールと位置
TransformVector    : 回転とスケール
TransformDirection : 回転



step(x,y) = x >= y



(a.x != 0.0 && a.y != 0.0 && a.z != 0.0) = all(a) = !any(a == 0.0) // すべての成分が0以外の場合1を返す
(a.x != 0.0 || a.y != 0.0 || a.z != 0.0) = any(a) = !all(a == 0.0) // どれかの成分が0以外の場合1を返す

(a.x == b.x && a.y == b.y && a.z == b.z) = all(a == b) = !any(a != b)
(a.x == b.x || a.y == b.y || a.z == b.z) = any(a == b) = !all(a != b)

( 4.0) % ( 1.5) = fmod( 4.0,  1.5) =  1.0;
(-4.0) % ( 1.5) = fmod(-4.0,  1.5) = -1.0;
( 4.0) % (-1.5) = fmod( 4.0, -1.5) =  1.0;
(-4.0) % (-1.5) = fmod(-4.0, -1.5) = -1.0;

frac( 1.25) = 0.25
frac(-1.25) = 0.75
frac( 1.75) = 0.75
frac(-1.75) = 0.25



int a, b;
int result = a / b;
↓
int a, b;
int temp0 = uint(max(a, -a)) / uint(max(b, -b));
int result = ((a ^ b) & 0x80000000) ? -temp0 : temp0;



int a, b;
int result = a % b;
↓
int a, b;
int temp0 = uint(max(a, -a)) % uint(max(b, -b));
int result = (a & 0x80000000) ? -temp0 : temp0;



matrix[0] よりも matrix._11_21_31_41 の方が命令数を節約できる



正規化ベクトル → ノーマルマップ
v * 0.5 + 0.5
(v + 1.0) * 0.5

ノーマルマップ → 正規化ベクトル
v * 2.0 - 1.0
(v - 0.5) * 2.0

R X = tangent
G Y = binormal
B Z = normal

float3 lNormal = input.lNormal;
float3 lTangent = input.lTangent.xyz;
float3 lBinormal = cross(lNormal, lTangent) * input.lTangent.w;

float3 wNormal = UnityObjectToWorldNormal(lNormal);
float3 wTangent = UnityObjectToWorldDir(lTangent);
float3 wBinormal = cross(wNormal, wTangent) * (input.lTangent.w * unity_WorldTransformParams.w);

float3 unpackNormal= UnpackNormal(tex2Dlod(_NormalMap, float4(uv, 0.0, 0.0)));
float3 unpackNormal= UnpackNormal(tex2D(_NormalMap, uv));

unpackNormal = wTangent * unpackNormal.x + wBinormal * unpackNormal.y + wNormal * unpackNormal.z;



Tangent (接空間) 座標系

 ↓ transpose(float4x3(wTangent, wBinormal, wNormal, wPos)) で変換

World 座標系



Object (Local) 座標系

 ↓ Model 行列 (UNITY_MATRIX_M) で変換

World 座標系

 ↓ View 行列 (UNITY_MATRIX_V) で変換

View 座標系

 ↓ Projection 行列 (UNITY_MATRIX_P) で変換

Clip 座標系

 ↓ ComputeNonStereoScreenPos 関数で変換 (DesktopかVRかで変わるかも)

Screen 座標系



// Clip 座標系から Screen 座標系へ変換
(cPos.xy / cPos.w) * 0.5 + 0.5
↓
(cPos.xy / cPos.w + 1.0) * 0.5
↓
// ComputeNonStereoScreenPos とほぼ同じ処理
(cPos.xy + cPos.ww) * 0.5 / cPos.w



Row    行
Column 列

単位行列 (I, E)
対角成分がすべて1で、それ以外の成分がすべて0の正方行列のこと

逆行列 (A^(-1))
A * B = I が成り立つとき
BをAの逆行列と呼ぶ

転置行列 (A^(t))
(行, 列)成分と(列, 行)成分を入れ替えた行列

正方行列
行の数と列の数が同じ行列

直行行列
転置行列と逆行列が同じ正方行列のこと
回転行列が直行行列の性質を持っている

正則行列 可逆行列 非特異行列
逆行列が存在できる行列

┌─┐
│  │
└─┘

ベクトルの内積
各成分を掛け算して足し合わせるだけ

(ax, ay, az)・(bx, by, bz) = ax * bx + ay * by + az * bz


例 3x3行列 A と 3次元ベクトル B の積

 ┌       ┐┌ ┐   ┌                  ┐   ┌                    ┐
 │a  b  c││j│   │Aの1行目・Bの1列目│   │(a, b, c)・(j, m, p)│
 │d  e  f││m│ = │Aの2行目・Bの1列目│ = │(d, e, f)・(j, m, p)│ = (a, d, g) * j + (b, e, h) * m + (c, f, i) * p
 │g  h  i││p│   │Aの3行目・Bの1列目│   │(g, h, i)・(j, m, p)│
 └       ┘└ ┘   └                  ┘   └                    ┘


例 3x3行列 A と 3x3行列 B の積

 ┌       ┐┌       ┐   ┌                                                            ┐   ┌                                                                  ┐
 │a  b  c││j  k  l│   │Aの1行目・Bの1列目   Aの1行目・Bの2列目   Aの1行目・Bの3列目│   │(a, b, c)・(j, m, p)   (a, b, c)・(k, n, q)   (a, b, c)・(l, o, r)│
 │d  e  f││m  n  o│ = │Aの2行目・Bの1列目   Aの2行目・Bの2列目   Aの2行目・Bの3列目│ = │(d, e, f)・(j, m, p)   (d, e, f)・(k, n, q)   (d, e, f)・(l, o, r)│
 │g  h  i││p  q  r│   │Aの3行目・Bの1列目   Aの3行目・Bの2列目   Aの3行目・Bの3列目│   │(g, h, i)・(j, m, p)   (g, h, i)・(k, n, q)   (g, h, i)・(l, o, r)│
 └       ┘└       ┘   └                                                            ┘   └                                                                  ┘

(AB)^t = B^t * A^t



uint Xorshift(uint seed)
{
    seed ^= seed << 13;
    seed ^= seed >> 17;
    seed ^= seed << 5;
    return seed;
}

Xorshift( 0) → 00000000000000000000000000000000
Xorshift( 1) → 00000000000001000010000000100001
Xorshift( 2) → 00000000000010000100000001000010
Xorshift( 3) → 00000000000011000110000001100011
Xorshift( 4) → 00000000000100001000000010000100
Xorshift( 5) → 00000000000101001010000010100101
Xorshift( 6) → 00000000000110001100000011000110
Xorshift( 7) → 00000000000111001110000011100111
Xorshift( 8) → 00000000001000010000000100001000
Xorshift( 9) → 00000000001001010010000100101001
Xorshift(10) → 00000000001010010100000101001010
Xorshift(11) → 00000000001011010110000101101011
Xorshift(12) → 00000000001100011000000110001100
Xorshift(13) → 00000000001101011010000110101101
Xorshift(14) → 00000000001110011100000111001110
Xorshift(15) → 00000000001111011110000111101111
Xorshift(16) → 00000000010000100000001000110001



https://www.reedbeta.com/blog/quadrilateral-interpolation-part-2

ここでの^記号はウェッジ積

0 = (−q + b1*u + b2*v + b3*u*v)^(b1 + b3*v)

0 = (-q)^(b1) + (b1*u)^(b1) + (b2*v)^(b1) + (b3*u*v)^(b1) + (-q)^(b3*v) + (b1*u)^(b3*v) + (b2*v)^(b3*v) + (b3*u*v)^(b3*v)
0 =   (-q^b1) +   (b1^b1)*u +   (b2^b1)*v +   (b3^b1)*u*v +   (-q^b3)*v +   (b1^b3)*u*v +   (b2^b3)*v*v + (b3^b3)*u*v*v

0 = (-q^b1) + (b2^b1)*v + (b3^b1)*u*v + (-q^b3)*v + (b1^b3)*u*v + (b2^b3)*v*v
0 = (-q^b1) + (b2^b1)*v + (-q^b3)*v + (b2^b3)*v*v + (b3^b1)*u*v + (b1^b3)*u*v

0 = (-q^b1) + ((b2^b1)+(-q^b3))*v + (b2^b3)*v*v + ((b3^b1)+(b1^b3))*u*v
0 = (-q^b1) + ((b2^b1)+(b3^ q))*v + (b2^b3)*v*v + ((b3^b1)-(b3^b1))*u*v
0 = (b1^q)  + ((b3^ q)-(b1^b2))*v + (b2^b3)*v*v

a = ★(b2 ⋀ b3)
b = ★(b3 ⋀  q - b1 ⋀ b2)
c = ★(b1 ⋀  q)

v = 2次方程式の解の公式(a, b, c)



float2 q, b1, b2, b3;
float u, v;

q = b1*u + b2*v + b3*u*v
↓
q.x = b1.x*u + b2.x*v + b3.x*u*v
q.y = b1.y*u + b2.y*v + b3.y*u*v

q.x = b1.x*u + b2.x*v + b3.x*u*v
q.x - b2.x*v = b1.x*u + b3.x*u*v
q.x - b2.x*v = (b1.x + b3.x*v)*u
(q.x - b2.x*v) / (b1.x + b3.x*v) = u
u = (q.x - b2.x*v) / (b1.x + b3.x*v)

q.y = b1.y*u + b2.y*v + b3.y*u*v
u = (q.y - b2.y*v) / (b1.y + b3.y*v)

(q.x - b2.x*v) / (b1.x + b3.x*v) = (q.y - b2.y*v) / (b1.y + b3.y*v)
(q.x - b2.x*v)*(b1.y + b3.y*v) = (q.y - b2.y*v)*(b1.x + b3.x*v)
q.x*b1.y + q.x*b3.y*v - b2.x*v*b1.y - b2.x*v*b3.y*v = q.y*b1.x + q.y*b3.x*v - b2.y*v*b1.x - b2.y*v*b3.x*v
q.x*b1.y + q.x*b3.y*v - b2.x*b1.y*v - b2.x*b3.y*v*v = q.y*b1.x + q.y*b3.x*v - b2.y*b1.x*v - b2.y*b3.x*v*v
0 = q.y*b1.x + q.y*b3.x*v - b2.y*b1.x*v - b2.y*b3.x*v*v - q.x*b1.y - q.x*b3.y*v + b2.x*b1.y*v + b2.x*b3.y*v*v
0 = q.y*b1.x - q.x*b1.y + q.y*b3.x*v - q.x*b3.y*v + b2.x*b1.y*v - b2.y*b1.x*v + b2.x*b3.y*v*v - b2.y*b3.x*v*v
0 = (q.y*b1.x - q.x*b1.y) + (q.y*b3.x - q.x*b3.y + b2.x*b1.y - b2.y*b1.x)*v + (b2.x*b3.y - b2.y*b3.x)*v*v

a = b2.x*b3.y - b2.y*b3.x                       //★(b2 ⋀ b3)と同じ
b = q.y*b3.x - q.x*b3.y + b2.x*b1.y - b2.y*b1.x //★(b3 ⋀  q - b1 ⋀ b2)と同じ
c = q.y*b1.x - q.x*b1.y                         //★(b1 ⋀  q)と同じ

v = 2次方程式の解の公式(a, b, c)



(i(a.x) + j(a.y) + k(a.z) + a.w) * (i(b.x) + j(b.y) + k(b.z) + b.w)

i(a.x) * i(b.x) = -1(a.x * b.x)
i(a.x) * j(b.y) =  k(a.x * b.y)
i(a.x) * k(b.z) = -j(a.x * b.z)
i(a.x) *   b.w  =  i(a.x * b.w)
j(a.y) * i(b.x) = -k(a.y * b.x)
j(a.y) * j(b.y) = -1(a.y * b.y)
j(a.y) * k(b.z) =  i(a.y * b.z)
j(a.y) *   b.w  =  j(a.y * b.w)
k(a.z) * i(b.x) =  j(a.z * b.x)
k(a.z) * j(b.y) = -i(a.z * b.y)
k(a.z) * k(b.z) = -1(a.z * b.z)
k(a.z) *   b.w  =  k(a.z * b.w)
  a.w  * i(b.x) =  i(a.w * b.x)
  a.w  * j(b.y) =  j(a.w * b.y)
  a.w  * k(b.z) =  k(a.w * b.z)
  a.w  *   b.w  =   (a.w * b.w)

i(+(a.x * b.w) +(a.y * b.z) -(a.z * b.y) +(a.w * b.x))
j(-(a.x * b.z) +(a.y * b.w) +(a.z * b.x) +(a.w * b.y))
k(+(a.x * b.y) -(a.y * b.x) +(a.z * b.w) +(a.w * b.z))
 (-(a.x * b.x) -(a.y * b.y) -(a.z * b.z) +(a.w * b.w))

i(+(a.w * b.x) -(a.z * b.y) +(a.y * b.z) +(a.x * b.w))
j(+(a.z * b.x) +(a.w * b.y) -(a.x * b.z) +(a.y * b.w))
k(-(a.y * b.x) +(a.x * b.y) +(a.w * b.z) +(a.z * b.w))
 (-(a.x * b.x) -(a.y * b.y) -(a.z * b.z) +(a.w * b.w))



x   0   0         0
0   y   0         0
0   0   n/(f-n)   nf/(f-n)
0   0   -1        0

x   0   0    0
0   y   0    0
0   0   0    nf/(f-n)
0   0   -1   0

x   0   0    0
0   y   0    0
0   0   -1   0
0   0   0    nf/(f-n)



 TX = dot(PM[0], vPos) / dot(PM[3], vPos)
 TY = dot(PM[1], vPos) / dot(PM[3], vPos)
1.0 = dot(PM[2], vPos) / dot(PM[3], vPos)
  ? = dot(PM[3], vPos)
	↓
 TX * dot(PM[3], vPos) = dot(PM[0].xyz, vPos.xyz)
 TY * dot(PM[3], vPos) = dot(PM[1].xyz, vPos.xyz)
1.0 * dot(PM[3], vPos) = dot(PM[2].xyz, vPos.xyz)
	↓
 TX * (dot(PM[3].xyz, vPos.xyz) + PM33) = dot(PM[0].xyz, vPos.xyz)
 TY * (dot(PM[3].xyz, vPos.xyz) + PM33) = dot(PM[1].xyz, vPos.xyz)
1.0 * (dot(PM[3].xyz, vPos.xyz) + PM33) = dot(PM[2].xyz, vPos.xyz)
	↓
 ┌             ┐ ┌                ┐┌      ┐ ┌    ┐  ┌                ┐┌      ┐
 │ TX, 0.0, 0.0│ │PM30, PM31, Pm32││vPos.x│ │PM33│  │PM00, PM01, PM02││vPos.x│
 │0.0,  TY, 0.0│(│PM30, PM31, Pm32││vPos.y│+│PM33│)=│PM10, PM11, PM12││vPos.y│
 │0.0, 0.0, 1.0│ │PM30, PM31, Pm32││vPos.z│ │PM33│  │PM20, PM21, PM22││vPos.z│
 └             ┘ └                ┘└      ┘ └    ┘  └                ┘└      ┘

 ┌             ┐┌                ┐┌      ┐ ┌             ┐┌    ┐ ┌                ┐┌      ┐
 │ TX, 0.0, 0.0││PM30, PM31, Pm32││vPos.x│ │ TX, 0.0, 0.0││PM33│ │PM00, PM01, PM02││vPos.x│
 │0.0,  TY, 0.0││PM30, PM31, Pm32││vPos.y│+│0.0,  TY, 0.0││PM33│=│PM10, PM11, PM12││vPos.y│
 │0.0, 0.0, 1.0││PM30, PM31, Pm32││vPos.z│ │0.0, 0.0, 1.0││PM33│ │PM20, PM21, PM22││vPos.z│
 └             ┘└                ┘└      ┘ └             ┘└    ┘ └                ┘└      ┘

 ┌             ┐┌    ┐ ┌                ┐┌      ┐ ┌             ┐┌                ┐┌      ┐
 │ TX, 0.0, 0.0││PM33│ │PM00, PM01, PM02││vPos.x│ │ TX, 0.0, 0.0││PM30, PM31, Pm32││vPos.x│
 │0.0,  TY, 0.0││PM33│=│PM10, PM11, PM12││vPos.y│-│0.0,  TY, 0.0││PM30, PM31, Pm32││vPos.y│
 │0.0, 0.0, 1.0││PM33│ │PM20, PM21, PM22││vPos.z│ │0.0, 0.0, 1.0││PM30, PM31, Pm32││vPos.z│
 └             ┘└    ┘ └                ┘└      ┘ └             ┘└                ┘└      ┘

 ┌             ┐┌    ┐  ┌                ┐ ┌             ┐┌                ┐ ┌      ┐
 │ TX, 0.0, 0.0││PM33│  │PM00, PM01, PM02│ │ TX, 0.0, 0.0││PM30, PM31, Pm32│ │vPos.x│
 │0.0,  TY, 0.0││PM33│=(│PM10, PM11, PM12│-│0.0,  TY, 0.0││PM30, PM31, Pm32│)│vPos.y│
 │0.0, 0.0, 1.0││PM33│  │PM20, PM21, PM22│ │0.0, 0.0, 1.0││PM30, PM31, Pm32│ │vPos.z│
 └             ┘└    ┘  └                ┘ └             ┘└                ┘ └      ┘

  ┌                ┐ ┌             ┐┌                ┐ -1 ┌             ┐┌    ┐ ┌      ┐
  │PM00, PM01, PM02│ │ TX, 0.0, 0.0││PM30, PM31, Pm32│    │ TX, 0.0, 0.0││PM33│ │vPos.x│
 (│PM10, PM11, PM12│-│0.0,  TY, 0.0││PM30, PM31, Pm32│)   │0.0,  TY, 0.0││PM33│=│vPos.y│
  │PM20, PM21, PM22│ │0.0, 0.0, 1.0││PM30, PM31, Pm32│    │0.0, 0.0, 1.0││PM33│ │vPos.z│
  └                ┘ └             ┘└                ┘    └             ┘└    ┘ └      ┘



cPos.x = dot(pm[0], vPos)
cPos.y = dot(pm[1], vPos)
cPos.z = dot(pm[2], vPos)
cPos.w = dot(pm[3], vPos)
	↓
cPos.x = dot(pm[0].xyz, vPos.xyz) + pm[0].w
cPos.y = dot(pm[1].xyz, vPos.xyz) + pm[1].w
cPos.z = dot(pm[2].xyz, vPos.xyz) + pm[2].w
	↓
 ┌      ┐ ┌                      ┐┌      ┐ ┌     ┐
 │cPos.x│ │pm.m00  pm.m01  pm.m02││vPos.x│ │pm.03│
 │cPos.y│=│pm.m10  pm.m11  pm.m12││vPos.y│+│pm.13│
 │cPos.z│ │pm.m20  pm.m21  pm.m22││vPos.z│ │pm.23│
 └      ┘ └                      ┘└      ┘ └     ┘

 ┌      ┐ ┌     ┐ ┌                      ┐┌      ┐
 │cPos.x│ │pm.03│ │pm.m00  pm.m01  pm.m02││vPos.x│
 │cPos.y│-│pm.13│=│pm.m10  pm.m11  pm.m12││vPos.y│
 │cPos.z│ │pm.23│ │pm.m20  pm.m21  pm.m22││vPos.z│
 └      ┘ └     ┘ └                      ┘└      ┘

 ┌                      ┐-1 ┌      ┐ ┌     ┐  ┌      ┐
 │pm.m00  pm.m01  pm.m02│   │cPos.x│ │pm.03│  │vPos.x│
 │pm.m10  pm.m11  pm.m12│  (│cPos.y│-│pm.13│)=│vPos.y│
 │pm.m20  pm.m21  pm.m22│   │cPos.z│ │pm.23│  │vPos.z│
 └                      ┘   └      ┘ └     ┘  └      ┘



length(cameraPos + Ray * n) = 1.0
↓
dot(cameraPos + Ray*n, cameraPos + Ray*n) = 1.0
↓
dot(cameraPos + Ray*n, Ray*n) + dot(cameraPos + Ray*n, cameraPos) = 1.0
↓
dot(Ray*n, Ray*n) + dot(cameraPos, Ray*n) + dot(cameraPos, cameraPos) + dot(Ray*n, cameraPos) = 1.0
↓
dot(Ray*n, Ray*n) + 2*dot(cameraPos, Ray*n) + dot(cameraPos, cameraPos) = 1.0
↓
(n^2)*dot(Ray, Ray) + n*2*dot(cameraPos, Ray) + dot(cameraPos, cameraPos) = 1.0
↓
n^2 + n*2*dot(cameraPos, Ray) + dot(cameraPos, cameraPos) - 1.0 = 0.0



sqrt(dot(a, a)) / r
↓
sqrt(dot(a, a)) / sqrt(r * r)
↓
sqrt(dot(a, a) / r * r)
↓
sqrt(dot(a/r, a/r))
































