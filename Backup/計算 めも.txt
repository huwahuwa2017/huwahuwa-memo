// 差が2の二つの値を掛け算すると、その答えは二つの値の中間の二乗-1になる
5*7 = 6*6-1
11*13 = 12*12-1



// 何かの役に立ちそうな曲線
a = 0.0 ~ 1.0
min(x / a, (1 - x) / (1 - a));



ピタゴラス数の見つけかた
奇数かつ平方数の数Nを用意する
1からNまでの奇数を小さい順から足し合わせる

N = 9
1+3+5+7+9 = 25
4^2 + 3^2 = 5^2

N = 25
1+3+5+...+21+23+25 = 169
        12^2 + 5^2 = 13^2

N = 49
1+3+5+...+45+47+49 = 625
        24^2 + 7^2 = 25^2



平面図形を球に投影した時のおおまかな面積 (立体角と呼ぶらしい)
面積 * dot(平面図形の重心の方向, 法線) / 距離^2



// ∞
sqrt(cos(x)) * abs(sin(x)) - abs(y) = 0



無限回微分可能な関数はこのような形で近似することができる

f(x) = a[0]*x^0 + a[1]*x^1 + a[2]*x^2 + ...

マクローリン展開
a[n] = f(n)(0) / n!



FP16
符号部  1bit
指数部  5bit
仮数部 10bit

          (1.仮数部) <<   (指数部 - 15)
(1 + 仮数部 / 2＾10)  * 2^(指数部 - 15)

例
57 → 111001 → 1.11001 << 5

指数部 = 5 + 15 = 20 = 10100
仮数部 = 1100100000



FP32
符号部  1bit
指数部  8bit
仮数部 23bit

          (1.仮数部) <<   (指数部 - 127)
(1 + 仮数部 / 2＾23)  * 2^(指数部 - 127)

例
57 → 111001 → 1.11001 << 5

指数部 = 5 + 127 = 132 = 10000100
仮数部 = 11001000000000000000000



// log2(x)の近似
log2(a) ≈ (asuint(a) >> 23) - 127
log2(a) ≈ asuint(a) / 2^23 - 127

// 2^xの近似
2^x ≈ asfloat((uint(x) + 127) << 23)
2^x ≈ asfloat(uint((x + 127) * 2^23))



Blenderで十角形から五芒星を作るための呪文
(3 - sqrt(5)) / 2



辺の長さが1の正三角形の高さ
1   = (0.5^2 + y^2)^0.5
1   = (0.25 + y^2)^0.5
1   = 0.25 + y^2
y^2 = 0.75
y   = 0.75^0.5
y   = 0.86602540378443864676372317075294



// Line SDF
float3 p0, p1, pos;
float3 edge = p1 - p0;
float3 rp = pos - p0;

float l = length(edge);
float n = edge / l;
float h = clamp(dot(rp, n), 0.0, l);
float temp0 = length(rp - (n * h));
↓
float l = length(edge);
float h = clamp(dot(rp, (edge / l)), 0.0, l);
float temp0 = length(rp - ((edge / l) * h));
↓
float l = length(edge);
float h = clamp(dot(rp, edge) / l, 0.0, l) / l;
float temp0 = length(rp - (edge * h));
↓
float l = length(edge);
float h = saturate(dot(rp, edge) / (l * l));
float temp0 = length(rp - (edge * h));
↓
float h = saturate(dot(rp, edge) / dot(edge, edge));
float temp0 = length(rp - (edge * h));



// ベジェ曲線

// 4ヶ所の座標
float3 v0, v1, v2, v3;

float3 lerp(float3 a, float3 b ,float t)
{
    return a + (b - a) * t;
}

float3 v4 = lerp(v0, v1, time);
float3 v5 = lerp(v1, v2, time);
float3 v6 = lerp(v2, v3, time);
float3 v7 = lerp(v4, v5, time);
float3 v8 = lerp(v5, v6, time);
float3 result = lerp(v7, v8, time);
↓
float3 result = v0 + (v1 - v0) * (time * 3.0) + (v2 + v0 - v1 * 2.0) * (time * time * 3.0) + (v3 - v0 + (v1 - v2) * 3.0) * (time * time * time);
↓
float3 bccvA = v3 + (-v2 + v1) * 3.0 - v0;
float3 bccvB = (v2 - v1 * 2.0 + v0) * 3.0;
float3 bccvC = (v1 - v0) * 3.0;
float3 bccvD = v0;
float3 result = time * (time * (time * bccvA + bccvB) + bccvC) + bccvD;



(x^2 + y^2)^0.5 =  1
 x^2 + y^2      =  1
       y^2      =  1 - x^2
       y        = (1 - x^2)^0.5



abs(x) / (abs(x) + 1.0) = 1.0 - 1.0 / (abs(x) + 1.0)



指数法則
a^x * a^y = a^(x+y)
a^x / a^y = a^(x-y)

a^x * b^x = (a * b)^x
a^x / b^x = (a / b)^x

(a^x)^y = a^(x * y)

(a^0.5) / (a^-0.5) = a

exp(a) = exp2(a * 1.442695)
e^a = (2^1.442695)^a = 2^(a * 1.442695)

1/i = i^-1 = -i
i^x = e^(iπx/2)
n^(iπx) = e^(iπxlog(n))



指数法則は特定条件下で成り立たないことがある

a^-0.5 ＝ (a^0.5)^-1
       ≠ (a^-1)^0.5

ほかにも成り立たない式がある

(e^(i*pi))^0.5 ＝ (e^(-i*pi))^0.5
  e^(i*pi*0.5) ≠ e^(-i*pi*0.5)
             i ≠ -i

i^n で表現すれば、なんとかなるかもしれない

(e^(i*pi))^0.5 ＝ (e^(-i*pi))^0.5
     (i^2)^0.5 ＝ (i^2)^0.5
             i ＝ i

負の値は下記のように表現できる
-a = |a| * -1
   = |a| * i^2

(-a)^-0.5 = (|a| * i^2)^-0.5
          = |a|^-0.5 * (i^2)^-0.5
          = |a|^-0.5 * i^-1
          = |a|^-0.5 * -i

|a|^-0.5 は指数法則が使える（たぶん）

|a|^-0.5 = (|a|^0.5) * (|a|^-1)
         = (|a|^0.5)^-1
         = (|a|^-1)^0.5



// Smooth
x * x * (3.0 - (2.0 * x))



// hlslの関数の動作確認

(a.x != 0.0 && a.y != 0.0 && a.z != 0.0) = all(a) = !any(a == 0.0) // すべての成分が0以外の場合1を返す
(a.x != 0.0 || a.y != 0.0 || a.z != 0.0) = any(a) = !all(a == 0.0) // どれかの成分が0以外の場合1を返す

(a.x == b.x && a.y == b.y && a.z == b.z) = all(a == b) = !any(a != b)
(a.x == b.x || a.y == b.y || a.z == b.z) = any(a == b) = !all(a != b)

( 4.0) % ( 1.5) = fmod( 4.0,  1.5) =  1.0;
(-4.0) % ( 1.5) = fmod(-4.0,  1.5) = -1.0;
( 4.0) % (-1.5) = fmod( 4.0, -1.5) =  1.0;
(-4.0) % (-1.5) = fmod(-4.0, -1.5) = -1.0;

frac( 1.25) = 0.25
frac(-1.25) = 0.75
frac( 1.75) = 0.75
frac(-1.75) = 0.25

step(x,y) = x >= y



lerp(a, 1.0, b) = lerp(b, 1.0, a)
lerp(a, b, c) = lerp(b, a, 1.0 - c)



Row    行
Column 列

単位行列 (I, E)
対角成分がすべて1で、それ以外の成分がすべて0の正方行列のこと

転置行列 (A^T)
(行, 列)成分と(列, 行)成分を入れ替えた行列

正方行列
行の数と列の数が同じ行列

対称行列
自身の転置行列と一致する正方行列
A = A^T が成り立つ

直行行列
転置行列と逆行列が同じ正方行列のこと
回転行列が直行行列の性質を持っている

正則行列 可逆行列 非特異行列
逆行列が存在できる行列

逆行列 (A^-1)
A * B = I が成り立つとき
BをAの逆行列と呼ぶ

─
┌┐
││
└┘

ベクトルの内積
各成分を掛け算して足し合わせるだけ

(ax, ay, az)・(bx, by, bz) = ax * bx + ay * by + az * bz


例 3x3行列 A と 3次元ベクトル B の積

 ┌       ┐┌ ┐   ┌                  ┐   ┌                    ┐
 │a  b  c││j│   │Aの1行目・Bの1列目│   │(a, b, c)・(j, m, p)│
 │d  e  f││m│ = │Aの2行目・Bの1列目│ = │(d, e, f)・(j, m, p)│ = (a, d, g) * j + (b, e, h) * m + (c, f, i) * p
 │g  h  i││p│   │Aの3行目・Bの1列目│   │(g, h, i)・(j, m, p)│
 └       ┘└ ┘   └                  ┘   └                    ┘


例 3x3行列 A と 3x3行列 B の積

 ┌       ┐┌       ┐   ┌                                                            ┐   ┌                                                                  ┐
 │a  b  c││j  k  l│   │Aの1行目・Bの1列目   Aの1行目・Bの2列目   Aの1行目・Bの3列目│   │(a, b, c)・(j, m, p)   (a, b, c)・(k, n, q)   (a, b, c)・(l, o, r)│
 │d  e  f││m  n  o│ = │Aの2行目・Bの1列目   Aの2行目・Bの2列目   Aの2行目・Bの3列目│ = │(d, e, f)・(j, m, p)   (d, e, f)・(k, n, q)   (d, e, f)・(l, o, r)│
 │g  h  i││p  q  r│   │Aの3行目・Bの1列目   Aの3行目・Bの2列目   Aの3行目・Bの3列目│   │(g, h, i)・(j, m, p)   (g, h, i)・(k, n, q)   (g, h, i)・(l, o, r)│
 └       ┘└       ┘   └                                                            ┘   └                                                                  ┘



A^T B^T = (B   A  )^T
A^T B   = (B^T A  )^T
A   B^T = (B   A^T)^T

(AB)^-1 = B^-1 A^-1

(A^T)^-1 = (A^-1)^T



// 三角関数の加法定理を行列で表してみた
                ┌               ┐┌      ┐
                │cos(a)  -sin(a)││cos(b)│
float2 resultA =│sin(a)   cos(a)││sin(b)│
                └               ┘└      ┘
resultA.x = cos(a)*cos(b) - sin(a)*sin(b) = cos(a + b)
resultA.y = sin(a)*cos(b) + cos(a)*sin(b) = sin(a + b)

                ┌               ┐┌       ┐
                │cos(a)  -sin(a)││ cos(b)│
float2 resultB =│sin(a)   cos(a)││-sin(b)│
                └               ┘└       ┘
resultB.x = cos(a)*cos(b) + sin(a)*sin(b) = cos(a - b)
resultB.y = sin(a)*cos(b) - cos(a)*sin(b) = sin(a - b)

┌               ┐┌               ┐ ┌                      ┐
│cos(a)  -sin(a)││cos(b)  -sin(b)│ │cos(a + b) -sin(a + b)│
│sin(a)   cos(a)││sin(b)   cos(b)│=│sin(a + b)  cos(a + b)│
└               ┘└               ┘ └                      ┘
┌                                                           ┐
│cos(a)*cos(b) - sin(a)*sin(b)  -cos(a)sin(b) - sin(a)cos(b)│
│sin(a)*cos(b) + cos(a)*sin(b)  -sin(a)sin(b) + cos(a)cos(b)│
└                                                           ┘



// 平行四辺形と楕円

	   ┌          ┐
	   │dx.x  dy.x│
	M =│dx.y  dy.y│
	   └          ┘
	   ┌ ┐ ┌ ┐
	 -1│x│ │X│
	M  │y│=│Y│
	   └ ┘ └ ┘

	X^2 + Y^2 = 1



	1 = X^2 + Y^2
	            ┌ ┐
	    ┌    ┐│X│
	1 = │X  Y││Y│
	    └    ┘└ ┘
	         ┌ ┐      ┌ ┐
	       -1│x│ T  -1│x│
	1 = ( M  │y│)  M  │y│
	         └ ┘      └ ┘
	   ┌ ┐              ┌ ┐
	   │x│T    -1  T  -1│x│
	1 =│y│  ( M   )  M  │y│
	   └ ┘              └ ┘
	   ┌ ┐              ┌ ┐
	   │x│T    T  -1  -1│x│
	1 =│y│  ( M  )   M  │y│
	   └ ┘              └ ┘
	   ┌ ┐           ┌ ┐
	   │x│T     T  -1│x│
	1 =│y│ ( M M  )  │y│
	   └ ┘           └ ┘
	                     ┌ ┐
	   ┌    ┐     T  -1│x│
	1 =│x  y│( M M  )  │y│
	   └    ┘          └ ┘



	              ┌          ┐┌          ┐
	     T  -1    │dx.x  dy.x││dx.x  dy.x│T  -1
	( M M  )   = (│dx.y  dy.y││dx.y  dy.y│  )
	              └          ┘└          ┘
	              ┌          ┐┌          ┐
	     T  -1    │dx.x  dy.x││dx.x  dx.y│ -1
	( M M  )   = (│dx.y  dy.y││dy.x  dy.y│)
	              └          ┘└          ┘
	            ┌                                            ┐
	     T  -1  │   dx.x^2 + dy.x^2     dx.x*dx.y + dy.x*dy.y│-1
	( M M  )   =│dx.x*dx.y + dy.x*dy.y     dx.y^2 + dy.y^2   │
	            └                                            ┘

	det = (dx.x^2 + dy.x^2)(dx.y^2 + dy.y^2) - (dx.x*dx.y + dy.x*dy.y)^2
	    = dx.x^2*dx.y^2 + dx.x^2*dy.y^2 + dy.x^2*dx.y^2 + dy.x^2*dy.y^2 - (dx.x^2*dx.y^2 + 2*dx.x*dx.y*dy.x*dy.y + dy.x^2*dy.y^2)
	    = dx.x^2*dy.y^2 + dy.x^2*dx.y^2 - 2*dx.x*dx.y*dy.x*dy.y
	    = (dx.x*dy.y - dy.x*dx.y)^2

	            ┌                                                  ┐
	     T  -1  │    dx.y^2 + dy.y^2       -(dx.x*dx.y + dy.x*dy.y)│
	( M M  )   =│-(dx.x*dx.y + dy.x*dy.y)      dx.x^2 + dy.x^2     │/det
	            └                                                  ┘



// MikkTSpace の簡単な式

  C

A   B

float2 uvA, uvB, uvC;
float3 posA, posB, posC;

float2 uvA2B = uvB - uvA;
float2 uvA2C = uvC - uvA;

float3 posA2B = posB - posA;
float3 posA2C = posC - posA;

                           ┌                  ┐┌                ┐-1┌ ┐
                           │posA2B.x  posA2C.x││uvA2B.x  uvA2C.x│  │1│
float3 tangent = normalize(│posA2B.y  posA2C.y││uvA2B.y  uvA2C.y│  │0│)
                           │posA2B.z  posA2C.z│└                ┘  └ ┘
                           └                  ┘



GPSみたいなやつ

4つの地点の距離
float AD, BD, CD, DD

4つの地点の座標
float3 AP, BP, CP, DP

求めたい座標
float3 TP

AD = length(AP - TP)
BD = length(BP - TP)
CD = length(CP - TP)
DD = length(DP - TP)


AD = length(AP - TP)
↓
AD^2 = dot(AP - TP, AP - TP)
↓
AD^2 = (AP.x - TP.x)^2 + (AP.y - TP.y)^2 + (AP.z - TP.z)^2
↓
AD^2 = (AP.x^2 + TP.x^2 - 2*AP.x*TP.x) + (AP.y^2 + TP.y^2 - 2*AP.y*TP.y) + (AP.z^2 + TP.z^2 - 2*AP.z*TP.z)
↓
AD^2 = dot(AP, AP) + dot(TP, TP) - 2*AP.x*TP.x - 2*AP.y*TP.y - 2*AP.z*TP.z
↓
AD^2 - dot(AP, AP) = -2*AP.x*TP.x - 2*AP.y*TP.y - 2*AP.z*TP.z + dot(TP, TP)


AD^2 - dot(AP, AP) = -2*AP.x*TP.x - 2*AP.y*TP.y - 2*AP.z*TP.z + dot(TP, TP)
BD^2 - dot(BP, BP) = -2*BP.x*TP.x - 2*BP.y*TP.y - 2*BP.z*TP.z + dot(TP, TP)
CD^2 - dot(CP, CP) = -2*CP.x*TP.x - 2*CP.y*TP.y - 2*CP.z*TP.z + dot(TP, TP)
DD^2 - dot(DP, DP) = -2*DP.x*TP.x - 2*DP.y*TP.y - 2*DP.z*TP.z + dot(TP, TP)
↓
┌    ┐ ┌           ┐ ┌                            ┐┌           ┐
│AD^2│ │dot(AP, AP)│ │-2*AP.x  -2*AP.y  -2*AP.z  1││   TP.x    │
│BD^2│-│dot(BP, BP)│=│-2*BP.x  -2*BP.y  -2*BP.z  1││   TP.y    │
│CD^2│ │dot(CP, CP)│ │-2*CP.x  -2*CP.y  -2*CP.z  1││   TP.z    │
│DD^2│ │dot(DP, DP)│ │-2*DP.x  -2*DP.y  -2*DP.z  1││dot(TP, TP)│
└    ┘ └           ┘ └                            ┘└           ┘
↓
┌                            ┐^-1 ┌    ┐ ┌           ┐  ┌           ┐
│-2*AP.x  -2*AP.y  -2*AP.z  1│    │AD^2│ │dot(AP, AP)│  │   TP.x    │
│-2*BP.x  -2*BP.y  -2*BP.z  1│   (│BD^2│-│dot(BP, BP)│)=│   TP.y    │
│-2*CP.x  -2*CP.y  -2*CP.z  1│    │CD^2│ │dot(CP, CP)│  │   TP.z    │
│-2*DP.x  -2*DP.y  -2*DP.z  1│    │DD^2│ │dot(DP, DP)│  │dot(TP, TP)│
└                            ┘    └    ┘ └           ┘  └           ┘

上記の式に値を代入してみる
AP = float3(  n, 0.0, 0.0)
BP = float3(0.0,   n, 0.0)
CP = float3(0.0, 0.0,   n)
DP = float3(0.0, 0.0, 0.0)

┌                   ┐^-1 ┌    ┐ ┌   ┐  ┌           ┐
│-2*n   0     0    1│    │AD^2│ │n^2│  │   TP.x    │
│ 0    -2*n   0    1│   (│BD^2│-│n^2│)=│   TP.y    │
│ 0     0    -2*n  1│    │CD^2│ │n^2│  │   TP.z    │
│ 0     0     0    1│    │DD^2│ │ 0 │  │dot(TP, TP)│
└                   ┘    └    ┘ └   ┘  └           ┘
↓
┌                                       ┐ ┌    ┐ ┌   ┐  ┌           ┐
│1/(-2*n)     0         0      -1/(-2*n)│ │AD^2│ │n^2│  │   TP.x    │
│   0      1/(-2*n)     0      -1/(-2*n)│(│BD^2│-│n^2│)=│   TP.y    │
│   0         0      1/(-2*n)  -1/(-2*n)│ │CD^2│ │n^2│  │   TP.z    │
│   0         0         0          1    │ │DD^2│ │ 0 │  │dot(TP, TP)│
└                                       ┘ └    ┘ └   ┘  └           ┘
↓
┌                             ┐┌          ┐ ┌           ┐
│-0.5/n    0       0     0.5/n││AD^2 - n^2│ │   TP.x    │
│  0     -0.5/n    0     0.5/n││BD^2 - n^2│=│   TP.y    │
│  0       0     -0.5/n  0.5/n││CD^2 - n^2│ │   TP.z    │
│  0       0       0       1  ││DD^2      │ │dot(TP, TP)│
└                             ┘└          ┘ └           ┘
↓
TP.x = (0.5/n) * (DD^2 - (AD^2 - n^2))
TP.y = (0.5/n) * (DD^2 - (BD^2 - n^2))
TP.z = (0.5/n) * (DD^2 - (CD^2 - n^2))
↓
TP.x = (0.5/n) * (DD^2 - AD^2 + n^2)
TP.y = (0.5/n) * (DD^2 - BD^2 + n^2)
TP.z = (0.5/n) * (DD^2 - CD^2 + n^2)

n = 0.5の場合
TP.x = DD^2 - AD^2 + 0.25
TP.y = DD^2 - BD^2 + 0.25
TP.z = DD^2 - CD^2 + 0.25
↓
float4 temp = float4(AD, BD, CD, DD);
temp = temp * temp;
TP = (temp.w + 0.25) - temp.xyz;



seiryu_k
ようするに座標を回転させたうえで回転後の座標系で平行移動させる行列ですよね。 
で、ここで行列の線形性を最大限活かしていくわけですが
4x4行列の回転部をA、平行移動部をWとすると、
4x4行列の変換は実際のところ、
Av+W＝v'という変換です。
（w成分は点群の座標で考えるとあんまり意味がないのでいったん無視）
vからv'を求めるのが順方向の行列なら、その逆行列はv'からvが求まればいいので、
道中がどうであれ、最終的にはv'がvとなるような行列が求まればそれが逆行列といえます。
ここまでを踏まえて、
上のベクトル式にA^-1を両辺掛けると
     Av+W  = v'
A^-1(Av+W) = A^-1v'
   v+A^-1W = A^-1v'
         v = A^-1v'-A^-1W
         v = A^-1(v'-W)
です。



https://www.reedbeta.com/blog/quadrilateral-interpolation-part-2

ここでの⋀記号はウェッジ積

0 = −q + b1*u + b2*v + b3*u*v
u成分を消したいので、u成分とくっついている係数や変数を足した値とのウェッジ積を計算する

0 = (−q + b1*u + b2*v + b3*u*v)⋀(b1 + b3*v)

0 = (-q)⋀(b1) + (b1*u)⋀(b1) + (b2*v)⋀(b1) + (b3*u*v)⋀(b1) + (-q)⋀(b3*v) + (b1*u)⋀(b3*v) + (b2*v)⋀(b3*v) + (b3*u*v)⋀(b3*v)
0 =   (-q⋀b1) +   (b1⋀b1)*u +   (b2⋀b1)*v +   (b3⋀b1)*u*v +   (-q⋀b3)*v +   (b1⋀b3)*u*v +   (b2⋀b3)*v*v + (b3⋀b3)*u*v*v

0 = (-q⋀b1) + (b2⋀b1)*v + (b3⋀b1)*u*v + (-q⋀b3)*v + (b1⋀b3)*u*v + (b2⋀b3)*v*v
0 = (-q⋀b1) + (b2⋀b1)*v + (-q⋀b3)*v + (b2⋀b3)*v*v + (b3⋀b1)*u*v + (b1⋀b3)*u*v

0 = (-q⋀b1) + ((b2⋀b1)+(-q⋀b3))*v + (b2⋀b3)*v*v + ((b3⋀b1)+(b1⋀b3))*u*v
0 = (-q⋀b1) + ((b2⋀b1)+(b3⋀ q))*v + (b2⋀b3)*v*v + ((b3⋀b1)-(b3⋀b1))*u*v
0 = (b1⋀q)  + ((b3⋀ q)-(b1⋀b2))*v + (b2⋀b3)*v*v

a = ★(b2 ⋀ b3)
b = ★(b3 ⋀  q - b1 ⋀ b2)
c = ★(b1 ⋀  q)

v = 2次方程式の解の公式(a, b, c)



float2 A, B
       ┌  ┐
       │Ax│┌      ┐
A ⊗ B =│Ay││Bx  By│
       └  ┘└      ┘
       ┌          ┐
       │AxBx  AxBy│
A ⊗ B =│AyBx  AyBy│
       └          ┘

A ∧ B = A ⊗ B - B ⊗ A
        ┌          ┐ ┌          ┐
        │AxBx  AxBy│ │BxAx  BxAy│
A ∧ B =│AyBx  AyBy│-│ByAx  ByAy│
        └          ┘ └          ┘
        ┌                    ┐
        │        0  AxBy-BxAy│
A ∧ B =│AyBx-ByAx          0│
        └                    ┘
        ┌                    ┐
        │        0  AxBy-AyBx│
A ∧ B =│AyBx-AxBy          0│
        └                    ┘
        ┌                       ┐
        │           0  AxBy-AyBx│
A ∧ B =│-(AxBy-AyBx)          0│
        └                       ┘

          (A + B)∧(A + B) = 0
 A∧A + A∧B + B∧A + B∧B = 0
               A∧B + B∧A = 0
                      A∧B = -(B∧A)

   A ∧ B  = -((-A) ∧ B) = -(A ∧ (-B)) = -(B ∧ A)
 -(A ∧ B) =   (-A) ∧ B  =   A ∧ (-B)  =   B ∧ A

2A ∧ 3B = 6(A ∧ B)

0 = 0 ∧ A = A ∧ 0



e1 = (1, 0)
e2 = (0, 1)

A = (Ax, Ay) = Ax*e1 + Ay*e2
B = (Bx, By) = Bx*e1 + By*e2

A∧B = (Ax*e1 + Ay*e2)∧(Bx*e1 + By*e2)
     = (Ax*e1)∧(Bx*e1) + (Ax*e1)∧(By*e2) + (Ay*e2)∧(Bx*e1) + (Ay*e2)∧(By*e2)
     = Ax*Bx*(e1∧e1) + Ax*By*(e1∧e2) + Ay*Bx*(e2∧e1) + Ay*By*(e2∧e2)
     = Ax*By*(e1∧e2) + Ay*Bx*(e2∧e1)
     = Ax*By*(e1∧e2) - Ay*Bx*(e1∧e2)
     = (Ax*By - Ay*Bx)*(e1∧e2)

★(A∧B) = Ax*By - Ay*Bx



float3 A, B

       ┌  ┐
       │Ax│┌          ┐
A ⊗ B =│Ay││Bx  By  Bz│
       │Az│└          ┘
       └  ┘
       ┌              ┐
       │AxBx AxBy AxBz│
A ⊗ B =│AyBx AyBy AyBz│
       │AzBx AzBy AzBz│
       └              ┘

A ∧ B = A ⊗ B - B ⊗ A
        ┌              ┐ ┌              ┐
        │AxBx AxBy AxBz│ │BxAx BxAy BxAz│
A ∧ B =│AyBx AyBy AyBz│-│ByAx ByAy ByAz│
        │AzBx AzBy AzBz│ │BzAx BzAy BzAz│
        └              ┘ └              ┘
        ┌                             ┐
        │        0 AxBy-BxAy AxBz-BxAz│
A ∧ B =│AyBx-ByAx         0 AyBz-ByAz│
        │AzBx-BzAx AzBy-BzAy         0│
        └                             ┘

|A ∧ B| = 0 + (AxBy-BxAy)(AyBz-ByAz)(AzBx-BzAx) + (AxBz-BxAz)(AyBx-ByAx)(AzBy-BzAy) - 0 - 0 - 0

|A ∧ B| = 0

        ┌       ┐
        │0  0  0│
A ∧ A =│0  0  0│
        │0  0  0│
        └       ┘



float2 a,b,c,d

c┌─┐d
 │  │
a└─┘b

lerp(A,B,T) = A + (B - A) * T
pos = lerp(lerp(a, b, u), lerp(c, d, u), v)
pos = lerp((a + (b - a) * u), (c + (d - c) * u), v)
pos = (a + (b - a) * u) + ((c + (d - c) * u) - (a + (b - a) * u)) * v
pos = (a + (b - a)*u) + (c*v + (d - c)*u*v) - (a*v + (b - a)*u*v)
pos = a + (b - a)*u + c*v + (d - c)*u*v - a*v - (b - a)*u*v
pos = a + (b - a)*u + (c - a)*v + (d - c - b + a)*u*v
pos - a = (b - a)*u + (c - a)*v + (a - b - c + d)*u*v

float2 q = pos - a
float2 b1 = b - a
float2 b2 = c - a
float2 b3 = a - b - c + d
float u, v;

q = b1*u + b2*v + b3*u*v
↓
q.x = b1.x*u + b2.x*v + b3.x*u*v
q.y = b1.y*u + b2.y*v + b3.y*u*v

q.x = b1.x*u + b2.x*v + b3.x*u*v
q.x - b2.x*v = b1.x*u + b3.x*u*v
q.x - b2.x*v = (b1.x + b3.x*v)*u
(q.x - b2.x*v) / (b1.x + b3.x*v) = u
u = (q.x - b2.x*v) / (b1.x + b3.x*v)

q.y = b1.y*u + b2.y*v + b3.y*u*v
u = (q.y - b2.y*v) / (b1.y + b3.y*v)

(q.x - b2.x*v) / (b1.x + b3.x*v) = (q.y - b2.y*v) / (b1.y + b3.y*v)
(q.x - b2.x*v)*(b1.y + b3.y*v) = (q.y - b2.y*v)*(b1.x + b3.x*v)
q.x*b1.y + q.x*b3.y*v - b2.x*v*b1.y - b2.x*v*b3.y*v = q.y*b1.x + q.y*b3.x*v - b2.y*v*b1.x - b2.y*v*b3.x*v
q.x*b1.y + q.x*b3.y*v - b2.x*b1.y*v - b2.x*b3.y*v*v = q.y*b1.x + q.y*b3.x*v - b2.y*b1.x*v - b2.y*b3.x*v*v
0 = q.y*b1.x + q.y*b3.x*v - b2.y*b1.x*v - b2.y*b3.x*v*v - q.x*b1.y - q.x*b3.y*v + b2.x*b1.y*v + b2.x*b3.y*v*v
0 = q.y*b1.x - q.x*b1.y + q.y*b3.x*v - q.x*b3.y*v + b2.x*b1.y*v - b2.y*b1.x*v + b2.x*b3.y*v*v - b2.y*b3.x*v*v
0 = (q.y*b1.x - q.x*b1.y) + (q.y*b3.x - q.x*b3.y + b2.x*b1.y - b2.y*b1.x)*v + (b2.x*b3.y - b2.y*b3.x)*v*v

a = b2.x*b3.y - b2.y*b3.x                       //★(b2 ⋀ b3)と同じ
b = q.y*b3.x - q.x*b3.y + b2.x*b1.y - b2.y*b1.x //★(b3 ⋀  q - b1 ⋀ b2)と同じ
c = q.y*b1.x - q.x*b1.y                         //★(b1 ⋀  q)と同じ

v = 2次方程式の解の公式(a, b, c)



// たぶんクォータニオン同士の掛け算
(i(a.x) + j(a.y) + k(a.z) + a.w) * (i(b.x) + j(b.y) + k(b.z) + b.w)

i(a.x) * i(b.x) = -1(a.x * b.x)
i(a.x) * j(b.y) =  k(a.x * b.y)
i(a.x) * k(b.z) = -j(a.x * b.z)
i(a.x) *   b.w  =  i(a.x * b.w)
j(a.y) * i(b.x) = -k(a.y * b.x)
j(a.y) * j(b.y) = -1(a.y * b.y)
j(a.y) * k(b.z) =  i(a.y * b.z)
j(a.y) *   b.w  =  j(a.y * b.w)
k(a.z) * i(b.x) =  j(a.z * b.x)
k(a.z) * j(b.y) = -i(a.z * b.y)
k(a.z) * k(b.z) = -1(a.z * b.z)
k(a.z) *   b.w  =  k(a.z * b.w)
  a.w  * i(b.x) =  i(a.w * b.x)
  a.w  * j(b.y) =  j(a.w * b.y)
  a.w  * k(b.z) =  k(a.w * b.z)
  a.w  *   b.w  =   (a.w * b.w)

i(+(a.x * b.w) +(a.y * b.z) -(a.z * b.y) +(a.w * b.x))
j(-(a.x * b.z) +(a.y * b.w) +(a.z * b.x) +(a.w * b.y))
k(+(a.x * b.y) -(a.y * b.x) +(a.z * b.w) +(a.w * b.z))
 (-(a.x * b.x) -(a.y * b.y) -(a.z * b.z) +(a.w * b.w))

i(+(a.w * b.x) -(a.z * b.y) +(a.y * b.z) +(a.x * b.w))
j(+(a.z * b.x) +(a.w * b.y) -(a.x * b.z) +(a.y * b.w))
k(-(a.y * b.x) +(a.x * b.y) +(a.w * b.z) +(a.z * b.w))
 (-(a.x * b.x) -(a.y * b.y) -(a.z * b.z) +(a.w * b.w))



// 投影行列 DirectX
x   0   0         0
0   y   0         0
0   0   n/(f-n)   nf/(f-n)
0   0   -1        0

// 逆Depth
x   0   0          0
0   y   0          0
0   0   n/(f-n)   -n*n/(f-n)
0   0   -1         n+f



// なにこれ？
length(cameraPos + Ray * n) = 1.0
↓
dot(cameraPos + Ray*n, cameraPos + Ray*n) = 1.0
↓
dot(cameraPos + Ray*n, Ray*n) + dot(cameraPos + Ray*n, cameraPos) = 1.0
↓
dot(Ray*n, Ray*n) + dot(cameraPos, Ray*n) + dot(cameraPos, cameraPos) + dot(Ray*n, cameraPos) = 1.0
↓
dot(Ray*n, Ray*n) + 2*dot(cameraPos, Ray*n) + dot(cameraPos, cameraPos) = 1.0
↓
(n^2)*dot(Ray, Ray) + n*2*dot(cameraPos, Ray) + dot(cameraPos, cameraPos) = 1.0
↓
n^2 + n*2*dot(cameraPos, Ray) + dot(cameraPos, cameraPos) - 1.0 = 0.0



sqrt(dot(a, a)) / r
↓
sqrt(dot(a, a)) / sqrt(r * r)
↓
sqrt(dot(a, a) / r * r)
↓
sqrt(dot(a/r, a/r))












